{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractDisplacementState = void 0;\n\nconst State_1 = require(\"./State\");\n\nconst Action_1 = require(\"../core-actions/Action\");\n\nclass AbstractDisplacementState extends State_1.State {\n  constructor(options) {\n    super(options);\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_DOWN,\n      fire: actionEvent => {\n        const {\n          clientX,\n          clientY\n        } = actionEvent.event;\n        this.handleMoveStart(clientX, clientY);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_MOVE,\n      fire: actionEvent => {\n        const {\n          event\n        } = actionEvent;\n\n        if (event.buttons === 0) {\n          // If buttons is 0, it means the mouse is not down, the user may have released it\n          // outside of the canvas, then we eject the state\n          this.eject();\n          return;\n        }\n\n        const {\n          clientX,\n          clientY\n        } = event;\n        this.handleMove(clientX, clientY, event);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_UP,\n      fire: () => this.handleMoveEnd()\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_START,\n      fire: actionEvent => {\n        const {\n          clientX,\n          clientY\n        } = actionEvent.event.touches[0];\n        this.handleMoveStart(clientX, clientY);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_MOVE,\n      fire: actionEvent => {\n        const {\n          event\n        } = actionEvent;\n        const {\n          clientX,\n          clientY\n        } = event.touches[0];\n        this.handleMove(clientX, clientY, event);\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.TOUCH_END,\n      fire: () => this.handleMoveEnd()\n    }));\n  }\n\n  handleMoveStart(x, y) {\n    this.initialX = x;\n    this.initialY = y;\n    const rel = this.engine.getRelativePoint(x, y);\n    this.initialXRelative = rel.x;\n    this.initialYRelative = rel.y;\n  }\n\n  handleMove(x, y, event) {\n    this.fireMouseMoved({\n      displacementX: x - this.initialX,\n      displacementY: y - this.initialY,\n      virtualDisplacementX: (x - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n      virtualDisplacementY: (y - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n      event\n    });\n  }\n\n  handleMoveEnd() {\n    this.eject();\n  }\n\n}\n\nexports.AbstractDisplacementState = AbstractDisplacementState;","map":{"version":3,"sources":["../../src/core-state/AbstractDisplacementState.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractDisplacementState = void 0;\nconst State_1 = require(\"./State\");\nconst Action_1 = require(\"../core-actions/Action\");\nclass AbstractDisplacementState extends State_1.State {\n    constructor(options) {\n        super(options);\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_DOWN,\n            fire: (actionEvent) => {\n                const { clientX, clientY } = actionEvent.event;\n                this.handleMoveStart(clientX, clientY);\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_MOVE,\n            fire: (actionEvent) => {\n                const { event } = actionEvent;\n                if (event.buttons === 0) {\n                    // If buttons is 0, it means the mouse is not down, the user may have released it\n                    // outside of the canvas, then we eject the state\n                    this.eject();\n                    return;\n                }\n                const { clientX, clientY } = event;\n                this.handleMove(clientX, clientY, event);\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_UP,\n            fire: () => this.handleMoveEnd()\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.TOUCH_START,\n            fire: (actionEvent) => {\n                const { clientX, clientY } = actionEvent.event.touches[0];\n                this.handleMoveStart(clientX, clientY);\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.TOUCH_MOVE,\n            fire: (actionEvent) => {\n                const { event } = actionEvent;\n                const { clientX, clientY } = event.touches[0];\n                this.handleMove(clientX, clientY, event);\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.TOUCH_END,\n            fire: () => this.handleMoveEnd()\n        }));\n    }\n    handleMoveStart(x, y) {\n        this.initialX = x;\n        this.initialY = y;\n        const rel = this.engine.getRelativePoint(x, y);\n        this.initialXRelative = rel.x;\n        this.initialYRelative = rel.y;\n    }\n    handleMove(x, y, event) {\n        this.fireMouseMoved({\n            displacementX: x - this.initialX,\n            displacementY: y - this.initialY,\n            virtualDisplacementX: (x - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n            virtualDisplacementY: (y - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n            event\n        });\n    }\n    handleMoveEnd() {\n        this.eject();\n    }\n}\nexports.AbstractDisplacementState = AbstractDisplacementState;\n//# sourceMappingURL=AbstractDisplacementState.js.map"]},"metadata":{},"sourceType":"script"}